RunCode -> Code RunCode | Code
Code -> Expression | ConditionalIf | ForLoop | WhileLoop | Import | Class | Def | 'pass' | Raise | With

NonZeroDigit -> '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
Digit -> '0' | NonZeroDigit
#NaturalNumberTail -> Digit #NaturalNumberTail
NaturalNumber -> Digit | NonZeroDigit #NaturalNumberTail | Boolean
(NaturalNumber) -> NaturalNumber | '(' NaturalNumber ')'
Integer -> NaturalNumber | '-' NaturalNumber
(Integer) -> Integer | '(' Integer ')'
Decimal -> Integer '.' | Integer '.' #NaturalNumberTail | Decimal E Integer
Boolean -> 'True' | 'False' | ComparisonOperation | LogicalOperation | MembershipOperation
Number -> Integer | Decimal | ArithmeticOperation | BitshiftOperation | BitwiseOperation
(Number) -> Number | '(' Number ')'

NoneType -> 'None'

AbjadLowerCase -> 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'a' Abjad | 'b' Abjad | 'c' Abjad | 'd' Abjad | 'e' Abjad | 'f' Abjad | 'g' Abjad | 'h' Abjad | 'i' Abjad | 'j' Abjad | 'k' Abjad | 'l' Abjad | 'm' Abjad | 'n' Abjad | 'o' Abjad | 'p' Abjad | 'q' Abjad | 'r' Abjad | 's' Abjad | 't' Abjad | 'u' Abjad | 'v' Abjad | 'w' Abjad | 'x' Abjad | 'y' Abjad | 'z' Abjad 
AbjadUpperCase -> 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | 'A' Abjad | 'B' Abjad | 'C' Abjad | 'D' Abjad | 'E' Abjad | 'F' Abjad | 'G' Abjad | 'H' Abjad | 'I' Abjad | 'J' Abjad | 'K' Abjad | 'L' Abjad | 'M' Abjad | 'N' Abjad | 'O' Abjad | 'P' Abjad | 'Q' Abjad | 'R' Abjad | 'S' Abjad | 'T' Abjad | 'U' Abjad | 'V' Abjad | 'W' Abjad | 'X' Abjad | 'Y' Abjad | 'Z' Abjad 
Abjad -> AbjadUpperCase | AbjadLowerCase | 'Abjad'
IdentifierCharacters = 'Abjad' | '_'
#IdentifierTail -> IdentifierCharacters #IdentifierTail | NaturalNumber #IdentifierTail | e
Variable -> IdentifierCharacters | IdentifierCharacters #IdentifierTail | Identifier '.' Variable | Identifier Slicer | Identifier '[' Atom ']'
(Variable) -> Variable | '(' Variable ')'
AtomLoop -> Atom | Atom ',' AtomLoop | e
Function -> Variable '(' AtomLoop ')'
Identifier -> Variable | Function
(Identifier) -> Identifier | '(' Identifier ')'

Newline -> '\n'
Indentation -> '\t' | Indentation '\t'
StringAcceptedCharacters = 'Abjad' | 'UnknownChar' | Identifier | Number
StringLoop -> StringAcceptedCharacters StringLoop
StringWithEnterLoop -> StringAcceptedCharacters StringWithEnterLoop | Newline StringWithEnterLoop
String -> '"' StringLoop '"' | ''' StringLoop ''' | ''' ''' ''' StringWithEnterLoop ''' ''' ''' | '"' '"' '"' StringWithEnterLoop '"' '"' '"' | StringOperation
(String) -> String | '(' String ')'

IterableItemLoop -> Expression ',' IterableItemLoop | Expression
List -> '[' IterableItemLoop ']'
Tuple -> '(' IterableItemLoop ')'
Iterable -> Tuple | String | List
SlicerValue -> (Integer) | (Identifier) | e
Slicer -> '[' SlicerValue ':' SlicerValue ':' SlicerValue ']' | '[' SlicerValue ':' SlicerValue ']' | '[' SlicerValue ']'

DictKey -> Number | String | Tuple
DictVal -> List | Tuple | Number | String 
DictionaryLoop -> DictKey ':' DictVal ',' DictionaryLoop | DictKey ':' DictVal | e
Dictionary -> '{' DictionaryLoop '}'

Bracket -> List | Tuple | Curly     /// ????
Literal -> Numbers | Strings | List | Tuple | Dictionary | Iterable Slicer | None
Atom -> Identifier | Literal | '(' Atom ')'


Expression -> ArithmeticOperation | StringOperation | AssignmentOperation | ComparisonOperation | LogicalOperation | IdentityOperation | MembershipOperation | BitwiseOperation | BitshiftOperation | BinaryOperation | Atom
ArithmeticOperator -> '+' | '-' | '*' | '/' | '%' | '**' | '//'
ArithmeticOperation -> (Number) ArithmeticOperator (Number) | '(' ArithmeticOperation ')'
StringOperation -> (String) '+' (String) | (Identifier) '+' (String) | (String) '+' (Identifier) | (Identifier) '+' (Identifier) | (String) '*' (NaturalNumber) | (String) '*' (Identifier) | (Identifier) '*' (NaturalNumber) | (Identifier) '*' (Identifier) | '(' StringOperation ')'
NumericAssignmentOperator -> '+=' | '-=' | '*=' | '/=' | '%=' | '**=' | '//=' | '&=' | '|=' | '^=' | '>>=' | '<<='
NumericAssignmentOperation -> (Identifier) NumericAssignmentOperator (Number) | (Identifier) NumericAssignmentOperator (Identifier)
StringAssignmentOperation -> (Identifier) '+=' (String) | (Identifier) '+=' (Identifier) | (Identifier) '*=' (NaturalNumber) | (Identifier) '*=' (Identifier)
AssignmentOperator -> '='
AssignmentOperation -> (Identifier) AssignmentOperator Atom | NumericAssignmentOperation | StringAssignmentOperation
ComparisonOperator -> '==' | '!=' | '<' | '>' | '<=' | '=>'
ComparisonOperation -> Atom ComparisonOperator Atom | '(' ComparisonOperation ')'
LogicalOperator -> 'and' | 'or'
LogicalOperation -> Atom LogicalOperator Atom | 'not' Expression | '(' LogicalOperation ')'
IdentityOperation -> Atom 'is' Atom | Atom 'is' 'not' Atom | '(' IdentityOperation ')'
MembershipOperation -> Atom in (Variable) | '(' MembershipOperation ')'
BitwiseOperator -> '&' | '|' | '^'
BitwiseOperation -> (Integer) BitwiseOperator (Integer) | '~' (Integer) | '(' BitwiseOperation ')'
BitshiftOperator -> '<<' | '>>'
BitshiftOperation -> (Integer) BitshiftOperator (NaturalNumber) | '(' BitshiftOperation ')'
BinaryOperation -> BitwiseOperation | BitshiftOperation


ConditionalIf -> 'if' Atom ':' Newline Indentation Code ConditionalElif
ConditionalElif -> e | 'elif' Atom ':' Newline Indentation Code ConditionalElif | 'else' ':' Newline Indentation Code

ForLoop -> 'for' Variable 'in' Iterable ':' Newline Indentation LoopRunCode | 'for' Variable 'in' Identifier ':' Newline Indentation LoopRunCode
WhileLoop -> 'while' Atom ':' Newline Indentation LoopRunCode 
LoopRunCode -> LoopCode | LoopCode LoopRunCode
LoopCode -> Expression | ConditionalIf | ForLoop | WhileLoop | Import | Class | Def | 'pass' | Raise | With | 'break' | 'continue'

ImportName -> IdentifierCharacters | IdentifierCharacters #IdentifierTail
FromName -> ImportName FromName | '.' FromName | ImportName | '.'
Import -> 'import' ImportName | 'from' FromName 'import' ImportName | 'import' ImportName 'as' ImportName | 'from' FromName 'import' ImportName 'as' ImportName

BaseClassName -> ImportName | ImportName '.' BaseClassName
Class -> 'class' ImportName ':' Newline Indentation Code | 'class' ImportName '(' BaseClassName ')' ':' Newline Indentation Code

Parameter -> e | ImportName ',' | ImportName
Def -> 'def' ImportName '(' Parameter ')' ':' Newline Indentation Code | 'def' ImportName '(' Parameter ')' ':' Newline Indentation Code Indentation 'return'

Raise -> 'raise' ImportName | 'raise' ImportName '(' (String) ')'
With -> 'with' Identifier 'as' ImportName ':' Newline Indentation Code